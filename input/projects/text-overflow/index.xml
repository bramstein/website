<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
  <title>jQuery Text Overflow plugin</title>

  <sidebar>
    <title>Download</title>

    <para>Version 0.7 ― 2010-02-07.</para>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="jquery.text-overflow.js">jquery.text-overflow.js</ulink>
        (Uncompressed, 3.7KB)</para>
      </listitem>

      <listitem>
        <para><ulink
        url="jquery.text-overflow.min.js">jquery.text-overflow.min.js</ulink>
        (Minified, 1.4KB)</para>
      </listitem>
    </itemizedlist>
  </sidebar>

  <sidebar>
    <title>Examples</title>

    <itemizedlist>
      <listitem>
        <para><ulink url="examples.html">Text Overflow example</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="css-or-js.html">Using the plugin as fallback for the
        text-overflow CSS property</ulink></para>
      </listitem>
    </itemizedlist>
  </sidebar>

  <sidebar>
    <title>License</title>

    <para>This plugin is licensed under the <ulink type=""
    url="/licenses/BSD.txt">new BSD license</ulink>. To summarize the license;
    the plugin is completely free for commercial and non-commercial use and
    you can do with it whatever you want, except claim it as your own
    work.</para>
  </sidebar>

  <section>
    <title>Introduction</title>

    <para>This jQuery plugin implements a simplified version of the <ulink
    url="https://developer.mozilla.org/en/CSS/text-overflow">CSS3
    text-overflow</ulink> property. The <property>text-overflow</property>
    property allows stylesheet authors to specify how and where text should be
    clipped. This is usually done by adding an ellipsis character
    "<literal>…</literal>" or three dots at the point the text should be cut
    off. Various browsers support this property, such as Opera, Internet
    Explorer and Safari. Firefox unfortunately does not. However, using this
    plugin you can simulate this functionality (well, as close as you can get
    without a native implementation.)</para>

    <para>To use it you simply call the <methodname>textOverflow</methodname>
    method on elements you want clipped. Clipping is only applied when the
    browser does not support it natively. The following is an example of how
    to clip all header elements on a page using the default plugin
    settings.</para>

    <programlisting>$('h1').textOverflow();</programlisting>

    <para>The <methodname>textOverflow</methodname> method optionally supports
    two arguments: the string to use for clipping the text, and a boolean to
    determine whether the plugin should automatically update the clipping when
    a change in the document has been detected.</para>

    <variablelist>
      <varlistentry>
        <term>textOverflow([str, autoUpdate])</term>

        <listitem>
          <variablelist>
            <varlistentry>
              <term>str</term>

              <listitem>
                <para>The string to append to the content before it is
                clipped. Defaults to the ellipsis character
                "<literal>…</literal>". May also contain HTML, but the string
                itself is not subject to being clipped.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>autoUpdate</term>

              <listitem>
                <para>Automatically update the clipped text when the available
                space for the text becomes smaller or larger. Defaults to
                false (because it incurs some extra costs.)</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The following example shows how to replace the default ellipsis
    character on all list elements with a three dot version, and turn on
    automatic updating.</para>

    <programlisting>$('li').textOverflow('...', true);</programlisting>

    <para>Please see the <ulink url="examples.html">examples page</ulink> for
    more examples on how to use the plugin.</para>
  </section>

  <section>
    <title>Frequently asked questions</title>

    <qandaset>
      <qandadiv>
        <qandaentry>
          <question>
            <para>Does this plugin support HTML elements inside the clipped
            content?</para>
          </question>

          <answer>
            <para>Yes.</para>
          </answer>
        </qandaentry>

        <qandaentry>
          <question>
            <para>How do I use this in combination with browsers that support
            the text-overflow property?</para>
          </question>

          <answer>
            <para>Simply use the CSS3 <property>text-overflow</property>
            property as you would normally, e.g.</para>

            <programlisting>overflow: hidden;
white-space: nowrap;
text-overflow: ellipsis;</programlisting>

            <para>Then also call the <methodname>textOverflow</methodname>
            plugin method on the same elements. When a browser has native
            support for the <property>text-overflow</property> property, the
            text overflow plugin will let the browse handle it natively, and
            otherwise it will apply its own text truncation code. For more
            details, see the <ulink url="css-or-js.html">CSS and JavaScript
            text overflow example</ulink>, or the <ulink
            url="http://www.quirksmode.org/css/textoverflow.html">Quirkmode's
            article on the text-overflow property</ulink>.</para>
          </answer>
        </qandaentry>

        <qandaentry>
          <question>
            <para>How do I restore the original contents of the clipped
            elements?</para>
          </question>

          <answer>
            <para>It depends on what your use case is. If you want to show
            more or less of the clipped element based on browser or element
            resize events, simply turn the <property>autoUpdate</property>
            functionality on. If you want to manually restore the original
            content, you'll have to store it somewhere yourself before
            applying the text overflow plugin.</para>
          </answer>
        </qandaentry>

        <qandaentry>
          <question>
            <para>Text overflow doesn't work when applied to hidden elements
            (using <code>display: none</code>.)</para>
          </question>

          <answer>
            <para>This is caused by the browser taking the elements out of the
            page flow. When an element is not in the page flow it has zero
            width and height. The text overflow plugin uses the width and
            height to calculate where to clip the text, so it can not do its
            work when an element is hidden. There are two approaches to work
            around this problem: the most simple solution is to only call the
            text overflow plugin after you display the hidden elements.
            Alternatively you could position the hidden elements offscreen and
            set its <property>visibility</property> property to
            <literal>hidden</literal> and then measure it.</para>
          </answer>
        </qandaentry>
      </qandadiv>
    </qandaset>
  </section>

  <section>
    <title>Credits</title>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="http://devongovett.wordpress.com/2009/04/06/text-overflow-ellipsis-for-firefox-via-jquery/">Devon
        Govett</ulink> ― Original plugin.</para>
      </listitem>

      <listitem>
        <para>Andrew A. Kononykhin ― Bug fix for markup reset on cloned
        elements.</para>
      </listitem>

      <listitem>
        <para>Micky Hulse ― Bug report on ellipsis character encoding &amp;
        incorrect DOM tree truncation.</para>
      </listitem>
    </itemizedlist>
  </section>
</article>