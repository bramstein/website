<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
  <title>jLayout — jQuery plugin</title>

  <sidebar>
    <title>Download</title>

    <para>Version 0.16 ― 2009-07-15.</para>

    <itemizedlist>
      <listitem>
        <para><ulink url="jquery.jlayout.js">jquery.jlayout.js</ulink>
        (Uncompressed, 5KB)</para>
      </listitem>

      <listitem>
        <para><ulink url="jquery.jlayout.min.js">jquery.jlayout.min.js</ulink>
        (Minified, 2.8KB)</para>
      </listitem>
    </itemizedlist>
  </sidebar>

  <sidebar>
    <title>Examples</title>

    <itemizedlist>
      <listitem>
        <para><ulink url="examples.html">Simple examples</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="borderlayout.html">Full page border
        layout</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="borderlayout-resize.html">Resizable border
        layout</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="borderlayout-resize-nested.html">Resizable nested
        border layout</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="borderlayout-resize-ghost.html">Resizable border
        layout with guides</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="borderlayout-resize-smooth.html">Smooth resizable
        border layout</ulink></para>
      </listitem>

      <listitem>
        <para><ulink type="" url="borderlayout-toggle.html">Toggle-able border
        layout</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="content-scroll.html">Scrolling
        content</ulink></para>
      </listitem>
    </itemizedlist>
  </sidebar>

  <sidebar>
    <title>Questions, suggestions, or problems?</title>

    <para>Please use the <ulink
    url="http://groups.google.com/group/jlayout/">jLayout Google Group</ulink>
    for any questions, suggestions, ideas or problems you might have using the
    jLayout library or the jQuery plugin. Feedback is much appreciated.</para>
  </sidebar>

  <sidebar>
    <title>License</title>

    <para>jLayout jQuery plugin is licensed under the <ulink type=""
    url="/licenses/BSD.txt">new BSD license</ulink>. To summarize the license;
    jLayout jQuery plugin is completely free for commercial and non-commercial
    use and you can do with it whatever you want, except claim it as your own
    work.</para>
  </sidebar>

  <sidebar>
    <title>Requirements</title>

    <para>The following libraries need to be available in order for the plugin
    to work:</para>

    <itemizedlist>
      <listitem>
        <para><ulink url="http://jquery.com/">jQuery</ulink> (1.2.6+)</para>
      </listitem>

      <listitem>
        <para><ulink url="/projects/jlayout/">jLayout</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="../jsizes/">JSizes</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="http://plugins.jquery.com/project/metadata">jQuery
        metadata plugin</ulink> (optional)</para>
      </listitem>
    </itemizedlist>
  </sidebar>

  <sidebar>
    <title>Compatibility</title>

    <para>The plugin has been tested and works in the following browsers (in
    standards mode):</para>

    <itemizedlist>
      <listitem>
        <para>Firefox 2, 3, 3.5</para>
      </listitem>

      <listitem>
        <para>Chrome</para>
      </listitem>

      <listitem>
        <para>Safari 3 &amp; 4</para>
      </listitem>

      <listitem>
        <para>Opera 9</para>
      </listitem>

      <listitem>
        <para>Internet Explorer 6, 7, 8</para>
      </listitem>
    </itemizedlist>
  </sidebar>

  <section>
    <title>Introduction</title>

    <para>The jLayout jQuery plugin provides four layout algorithms for laying
    out HTML elements in web pages. The first is
    <methodname>border</methodname>, which lays out components in five
    different regions. The second algorithm is <methodname>grid</methodname>,
    which lays out components in a user defined grid. The third algorithm is
    <methodname>flexGrid</methodname>, which lays out components in a grid
    with flexible column and row sizes. The fourth and last algorithm is flow,
    which lays out components in rows with components overflowing to new rows
    if there is not enough horizontal space. The plugin allows you to lay out
    your elements with as little code as possible, and behaves correctly when
    used with margins, padding and borders.</para>

    <para>You can see the library in action on the <ulink
    url="examples.html">examples page</ulink> which features grids, border
    layouts, nested layouts, columns, and more. There is also an example of
    using a <ulink url="borderlayout.html">full-page border layout</ulink>,
    and a <ulink type="" url="borderlayout-resize.html">resizable full-page
    border layout using jQuery UI</ulink> for web application
    developers.</para>
  </section>

  <section>
    <title>API</title>

    <para>The following method is added to the jQuery element method
    namespace.</para>

    <variablelist>
      <varlistentry>
        <term>layout(options)</term>

        <listitem>
          <para>Creates a new layout algorithm, parses meta data if available,
          scans for child elements, and lays out the container. It returns the
          jQuery object so it can be chained. The options parameter can
          contain all of the layout algorithm properties described on the
          <ulink url="/projects/jlayout/">jLayout project page</ulink>. It
          accepts two additional other properties:</para>

          <variablelist>
            <varlistentry>
              <term>type</term>

              <listitem>
                <para>The layout algorithm to use. Should be either
                <constant>grid</constant>, <constant>border</constant>,
                <methodname>flex-grid</methodname>, or
                <methodname>flow</methodname>. Defaults to
                <constant>grid</constant>.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>resize</term>

              <listitem>
                <para>Automatically resize the container to fit its children's
                preferred size; <constant>false</constant> resizes the child
                elements to fit the container, <constant>true</constant>
                resizes the container to fit the child elements. Defaults to
                <constant>true</constant>.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Examples</title>

    <sidebar>
      <title>Note</title>

      <para>It is important to set the CSS <property>display</property>
      property correctly on elements used in a layout. The <ulink
      url="http://www.w3.org/TR/CSS21/visudet.html#Computing_widths_and_margins">CSS
      specification</ulink> defines the content width of a container element
      as the sum of the contained elements margin-left, width, and
      margin-right properties (the same applies to the height property of
      course.) Browsers implementing this standard correctly will thus return
      a larger computed margin than the one set by the stylesheet. If
      automatic resizing of containers is desired remember to set the display
      property to <property>inline-block</property> or float the elements (or
      some other property that will “wrap” the container around the child
      elements.) See <ulink url="examples.html">the examples</ulink> for more
      details.</para>
    </sidebar>

    <para>Below is an example of laying out a simple 2x2 grid containing four
    components. If the items are not specified in the code, the
    <methodname>layout</methodname> method will use all child elements of the
    container (not including text nodes.)</para>

    <programlisting>$('#my-container').layout({
    type: 'grid',
    columns: 2,
    rows: 2,
    items: [
        $('#component-1'),
        $('#component-2'),
        $('#component-3'),
        $('#component-4')
    ]
});</programlisting>

    <para>If you have the jQuery metadata plugin installed you can also
    specify the layout in your HTML code. The following example will produce
    the same result as the previous example with less code.</para>

    <programlisting>$('#my-container').layout();</programlisting>

    <programlisting>&lt;div id="my-container" class="{layout: {type: 'grid', columns: 2, rows: 2}}"&gt;
    &lt;div&gt;One&lt;/div&gt;
    &lt;div&gt;Two&lt;/div&gt;
    &lt;div&gt;Three&lt;/div&gt;
    &lt;div&gt;Four&lt;/div&gt;
&lt;/div&gt;</programlisting>

    <para>Note that the plugin metadata should always be contained in a
    <property>layout</property> property whose contents is the same as the
    options object passed to the <methodname>layout</methodname> method. If
    the layout is set up using metadata the <methodname>layout</methodname>
    method can be called without parameters.</para>

    <para>The border layout is set up in the same way, except that when a
    region is not given it will try to find the first element inside the
    container with a class name for that region. It will ignore other elements
    with the same region (class) name.</para>

    <programlisting>$('#my-container').layout();</programlisting>

    <programlisting>&lt;div id="my-container" class="{layout: {type: 'border' }}"&gt;
    &lt;div class="center"&gt;Center&lt;/div&gt;
    &lt;div class="north"&gt;North&lt;/div&gt;
    &lt;div class="center"&gt;Center?&lt;/div&gt;
&lt;/div&gt;</programlisting>

    <para>The above example will only lay out the first center element and the
    north element. It will ignore the second center element (it might however
    still show up on your web page if you don't hide it yourself; the plugin
    does not modify the visibility of elements.)</para>
  </section>

  <section>
    <title>Frequently Asked Questions</title>

    <variablelist>
      <varlistentry>
        <term>I'm using a full page layout. When I recalculate the layout at
        the <methodname>onresize</methodname> event sometimes there is empty
        space around the edges of my layout. How can I solve this?</term>

        <listitem>
          <para>This is caused by unmaximizing the window. The browser detects
          the window change, resizes the window and redraws the content. At
          this point it detects the window size is too small for your layout
          and adds horizontal or vertical scroll bars if necessary. It then
          fires the <methodname>onresize</methodname> event. The layout
          manager recalculates the layout using the size of the window minus
          the size of the scrollbars and lays out the container accordingly.
          The browser then detects the content suddenly fits into the browser
          window and removes the scroll bars. Gaps remain where the scroll
          bars once were, and the layout it not calculated again since the
          window has not been resized. To fix this, set the overflow property
          of the <classname>html</classname> or <classname>body</classname>
          elements to hidden. This will ensure that scrollbars never show up
          on unmaximize, and the layout is calculated correctly.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Can I make the layout resizable, by―for example―dragging the
        borders?</term>

        <listitem>
          <para>Although the jLayout plugin has no notion of user interaction
          it can easily be integrated with libraries that support resizable
          components. One such library is <ulink
          url="http://jqueryui.com/">jQuery UI</ulink> which has a
          <classname>resizable</classname> interaction widget. Using this
          interaction you can make any layout element (container, or child
          element) resizable by simply calling the
          <methodname>resizable</methodname> method. For example if you have a
          border layout and wish the north component with id
          <classname>#north</classname> to become resizable you invoke
          <code>$('#north').resizable();</code>. For more options please refer
          to the <ulink url="http://jqueryui.com/demos/resizable/">jQuery UI
          resizable documentation</ulink> or examine <ulink
          url="borderlayout-resize.html">an example of a resizable border
          layout</ulink>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Is it possible to save the position of the layout when
        navigating to other pages?</term>

        <listitem>
          <para>Sure, the easiest way to do this is to query the sizes of all
          components and containers using the <methodname>width</methodname>
          and <methodname>height</methodname> methods. Serialize this
          information to a cookie, and restore the layout on page load using
          the information in the cookie and the <methodname>width</methodname>
          and <methodname>height</methodname> methods.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>How do I hide or show a component or container (with an
        animation?)</term>

        <listitem>
          <para>The easiest way is to use the standard jQuery
          <methodname>animate</methodname> method. When handling the event
          that should toggle a certain component you call the
          <methodname>animate</methodname> function with the property you
          would like to animate (say the <property>width</property> or
          <property>height</property>), and the parameters to the animation.
          The following code example will toggle a component's width and
          animate it accordingly. Note that both callbacks to the
          <methodname>layout</methodname> method are necessary; the
          <property>complete</property> callback will be executed when the
          animation reached its final point, and the <property>step</property>
          callback will be executed during the intermediate steps.</para>

          <programlisting>var container = $('.layout');
$('#mycomponent').animate({width: 'toggle'}, {duration: 500, complete: container.layout, step: container.layout});</programlisting>

          <para>You might also want to take a look at the examples, which
          includes a <ulink url="borderlayout-toggle.html">border layout with
          toggle-able components</ulink>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Can I have scroll bars for content that does not fit into a
        component?</term>

        <listitem>
          <para>No problem, just set the CSS overflow: auto property like you
          normally would on an absolute or relativily positioned element, and
          scroll bars will appear when necessary. You might also want to set
          the <property>resize</property> option to false, to keep jLayout
          from resizing your containers. There is an <ulink
          url="content-scroll.html">example of a layout with scroll
          bars</ulink> available as well.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</article>