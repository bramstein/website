<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
  <title>JSizes ― jQuery extension plugin for CSS properties</title>

  <sidebar>
    <title>Download</title>

    <para>Version 0.32 ― 2008-10-05.</para>

    <itemizedlist>
      <listitem>
        <para><ulink url="jquery.sizes.js">jquery.sizes.js</ulink>
        (Uncompressed, 2.2KB)</para>
      </listitem>

      <listitem>
        <para><ulink url="jquery.sizes.min.js">jquery.sizes.min.js</ulink>
        (Minified, 1.2KB)</para>
      </listitem>
    </itemizedlist>
  </sidebar>

  <sidebar>
    <title>License</title>

    <para>JSizes is licensed under the <ulink url="/licenses/BSD.txt">new BSD
    license</ulink>. To summarize the license; JSizes is completely free for
    commercial and non-commercial use and you can do with it whatever you
    want, except claim it as your own work.</para>
  </sidebar>

  <section>
    <title>Introduction</title>

    <para>JSizes is a small plugin for the <ulink type=""
    url="http://jquery.com/">jQuery JavaScript library</ulink> which adds
    support for querying and setting the <acronym>CSS</acronym>
    <property>min-width</property>, <property>min-height</property>,
    <property>max-width</property>, <property>max-height</property>,
    <property>border-*-width</property>, <property>margin</property>, and
    <property>padding</property> properties. Additionally it has one method
    for determining whether an element is visible. In total it adds six new
    methods to the jQuery element <acronym>API</acronym>. It internally calls
    the jQuery built-in <methodname>css</methodname> method, so syntax and use
    is identical to calling <code>css('property-name', ...)</code>. An example
    of its use follows.</para>

    <programlisting>jQuery(function($) {
   var myDiv = $('#myDiv');

   myDiv.minWidth(100); // set 'min-width' to 100px
   alert(myDiv.minWidth()); // displays '100'
});</programlisting>

    <para>Note that all returned values are converted to pixel values, without
    the <literal>px</literal> suffix. It is thus safe to use these methods in
    calculations without having to worry about non-numeric values. Most
    importantly, it does not add support for min- and max-sizes on browsers
    that do not natively support it, it just adds convenient methods to query
    these properties and return a sensible value when they are not available
    or not set.</para>
  </section>

  <section>
    <title>API</title>

    <para>The plugin adds the following methods to the JQuery object:</para>

    <variablelist>
      <varlistentry>
        <term>minSize()</term>

        <listitem>
          <para>Returns the CSS <property>min-width</property> and
          <property>min-height</property> properties of the first matched
          element as pixel values in an object with <property>width</property>
          and <property>height</property> properties. If a CSS property is not
          set <literal>0</literal> is returned as value.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>minSize(value)</term>

        <listitem>
          <para>Sets the CSS <property>min-width</property>, and
          <property>min-height</property> property on all matched elements.
          Expects a value object containing any of <property>width</property>
          and <property>height</property> properties. If the property values
          are numbers they will be converted to pixel values.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>maxSize()</term>

        <listitem>
          <para>Returns the CSS <property>max-width</property> and
          <property>max-height</property> properties of the first matched
          element as pixel values in an object with <property>width</property>
          and <property>height</property> properties. If a CSS property is not
          set <constant>Number.MAX_VALUE</constant> is returned as
          value.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>maxSize(value)</term>

        <listitem>
          <para>Sets the CSS <property>max-width</property> and
          <property>max-height</property> property on all matched elements.
          Expects a value object containing any of <property>width</property>
          and <property>height</property> properties. If the property values
          are numbers they will be converted to pixel values.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>margin()</term>

        <listitem>
          <para>Returns the CSS <property>margin</property> property of the
          first matched element as pixel values in an object with
          <property>top</property>, <property>bottom</property>,
          <property>left</property>, and <property>right</property>
          properties.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>margin(value)</term>

        <listitem>
          <para>Sets the CSS <property>margin</property> property on all
          matched elements. Expects a value object containing any of
          <property>top</property>, <property>bottom</property>,
          <property>left</property>, and <property>right</property>
          properties. If the property values are numbers they will be
          converted to pixel values.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>padding()</term>

        <listitem>
          <para>Returns the CSS <property>padding</property> property of the
          first matched element as pixel values in an object with
          <property>top</property>, <property>bottom</property>,
          <property>left</property>, and <property>right</property>
          properties.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>padding(value)</term>

        <listitem>
          <para>Sets the CSS <property>padding</property> property on all
          matched elements. Expects a value object containing any of
          <property>top</property>, <property>bottom</property>,
          <property>left</property>, and <property>right</property>
          properties. If the property values are numbers they will be
          converted to pixel values.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>border()</term>

        <listitem>
          <para>Returns the CSS <property>border-*-width</property> property
          of the first matched element as pixels values in an object with
          <property>top</property>, <property>bottom</property>,
          <property>left</property>, and <property>right</property>
          properties.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>border(value)</term>

        <listitem>
          <para>Sets the CSS <property>border-*-width</property> property on
          all matched elements. Expects a value object containing any of
          <property>top</property>, <property>bottom</property>,
          <property>left</property>, and <property>right</property>
          properties. If the property values are numbers they will be
          converted to pixel values. Note that the CSS
          <property>border-style</property> property also needs to be set in
          order for the border to show.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>isVisible()</term>

        <listitem>
          <para>Returns true if the first matched element is visible (i.e. has
          neither <property>visibility</property> set to
          <constant>hidden</constant>, nor <property>display</property> set to
          <constant>none</constant>), false otherwise.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Examples</title>

    <para>Some examples of how the new methods can be used:</para>

    <programlisting>jQuery(function($) {
   var myDiv = $('#myDiv');

   // set margin-top to 100px and margin-bottom to 10em
   myDiv.margin({top: 100, bottom: '10em'});

   // displays the size of the top border in pixels
   alert(myDiv.border().top);

   // displays true if the element is visible, false otherwise
   alert(myDiv.isVisible());

   // set padding-right to 10px and margin-left to 15px using chaining
   myDiv.padding({right: 10}).margin({left: 15});
});</programlisting>

    <para>The above example also shows that chaining can be used on methods
    that do not return values.</para>
  </section>
</article>