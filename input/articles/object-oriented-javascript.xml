<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
  <title>Book Review: “Object Oriented JavaScript” by Stoyan Stefanov</title>

  <section>
    <title>Introduction</title>

    <sidebar>
      <graphic fileref="object-oriented-javascript.png" />

      <variablelist>
        <varlistentry>
          <term>Title</term>

          <listitem>
            <para><ulink
            url="http://www.packtpub.com/object-oriented-javascript-applications-libraries/book">Object
            Oriented JavaScript: Create scalable, reusable high-quality
            JavaScript applications and libraries</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Author</term>

          <listitem>
            <para><ulink
            url="http://www.packtpub.com/author_view_profile/id/28">Stoyan
            Stefanov</ulink></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>ISBN</term>

          <listitem>
            <para>978-1-847194-14-5</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sidebar>

    <para>A few weeks ago I was asked by <ulink type=""
    url="http://www.packtpub.com/">Packt Publishing</ulink> to review one of
    their titles “<ulink
    url="http://www.packtpub.com/object-oriented-javascript-applications-libraries/book">Object
    Oriented JavaScript: Create scalable, reusable high-quality JavaScript
    applications and libraries</ulink>”. As an avid reader and obsessed with
    all things JavaScript I couldn't say no. What follows is based on the
    notes I took while reading. The book starts with a good introduction to
    the various aspects of JavaScript, from data types and control structures
    in Chapter 2 to functions and objects in Chapter 3 and 4. I'm not going to
    say much about these introduction chapters; the writing is clear and
    contains plenty of examples you can follow along. Although these chapters
    provide a good introduction to basic JavaScript, you could find the same
    information in most other JavaScript books (<ulink
    url="http://oreilly.com/catalog/9780596000486/">JavaScript the Definitive
    Guide</ulink> comes to mind.)</para>
  </section>

  <section>
    <title>Prototypes and inheritance</title>

    <para>The interesting stuff however starts in Chapter 5 with an in-depth
    discussion of JavaScript's prototype based nature. This and the next
    chapter provide one of the clearest introductions to prototype based
    programming I have seen so far. If you're already familiar with basic
    JavaScript but unsure about your knowledge of prototypes, this would be a
    good place to start.</para>

    <sidebar>
      <title>Augmenting built-in objects</title>

      <para>Old scripts will most likely break due to unfiltered for in loops.
      The more attention we draw to this issue the less of problem it will
      be.</para>

      <para>The performance argument is valid. For now. I performed some
      rather informal tests on some of the latest browser builds and found the
      difference between filtered and unfiltered for in loops almost
      negligible (admittedly, it did make a rather large impact on Internet
      Explorer 6, version 7 was much better―I haven't tested version 8
      yet.)</para>

      <para>Incompatibility with future core language extension can be
      mitigated by setting up a standardization effort or creating a standard
      library (preferably community based.)</para>
    </sidebar>

    <para>Chapter 5 also contains a section about augmenting the built-in
    objects such as <type>Object</type>, <type>Array</type>, and
    <type>Function</type>. I was pleased to see this make an appearance, as it
    is in my opinion a valid and beautiful technique for extending a language
    with new concepts and constructs. It is unfortunate that many leading
    JavaScript authors consider it an outlawed practice. The most often cited
    reasons for banning it are: breaking old scripts that rely on unfiltered
    for in loops, performance regressions, and incompatibility with future
    extension to the core language.</para>

    <para>Chapter 6 introduces various forms of inheritance, such as
    classical, prototypical, and parasitic and the differences between them.
    It is very nice to see a book on JavaScript take a modern approach to
    writing JavaScript. Many JavaScript libraries and sometimes books try to
    shoehorn the language into a more traditional object oriented programming
    language such as Java. This book shows that there are better and simpler
    alternatives to classical inheritance available in prototype based
    languages (and if you really want to use classical inheritance it will
    show you how to do that as well.)</para>
  </section>

  <section>
    <title>Interlude: The Browser Environment</title>

    <para>I'm not entirely sure about Chapter 7 “The Browser Environment”. It
    doesn't quite seem to fit in this mostly language oriented book. Although
    the book does an excellent job at giving an overview of both the
    <acronym>DOM</acronym> and <acronym>BOM</acronym>, there are other books
    which give more in-depth details of the browser environment. Regardless,
    it serves as a good overview of the topic and the reader can explore the
    introduced topics in more depth through other books and websites. I
    personally would have preferred a “pure” JavaScript book, but I don't
    blame the author; writing a JavaScript book without even mentioning the
    browser is a risky choice.</para>
  </section>

  <section>
    <title>Coding and design patterns</title>

    <para>Chapter 8 “Coding and Design Patterns” is in my opinion the most
    interesting chapter. It introduces various coding and design patterns such
    as initialization time branching and configuration objects. Initialization
    time branching is a very powerful tool. I use it extensively in my <ulink
    url="http://www.bramstein.com/projects/jfun/">JavaScript functional
    pattern matching library</ulink> to parse and preprocess patterns at
    initialization time instead of run-time, thereby saving considerable
    processing time when pattern matched functions are called.</para>

    <para>It is good to see the configuration objects pattern (sometimes
    referred to as option objects) described as it is used extensively in
    almost all JavaScript libraries. One minor caveat; remember to check if
    the configuration object is defined. In my code I usually have one or two
    required parameters and an optional configuration object. In this case it
    is important to check if the configuration object is defined (the sample
    code in the book does not perform this check.)</para>

    <para>The chapter also introduces JSON as a coding pattern and briefly
    compares it to XML as a lightweight and easy to parse alternative.
    Unfortunately, my REST backend web services typically produce XML
    documents because most of my data sources are either XML or HTML. Instead
    of parsing XML on the client side I apply an <ulink type=""
    url="http://www.bramstein.com/projects/xsltjson/">XSLT transformation that
    transforms the XML to JSON</ulink>.</para>

    <para>The chapter continues with a selection of patterns from the famous
    <ulink
    url="http://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional/dp/0201633612">Gang
    of Four book</ulink> implemented in JavaScript. I particularly like the
    observer pattern, which is a good example of the power of mix-ins. The
    book implements this with a special <methodname>make</methodname> method
    as part of the observer namespace. I usually create mix-ins without a
    special <methodname>make</methodname> method by using a variant of
    constructor functions.</para>

    <programlisting>var observer = function(o) {
  o.addSubscriber = function (callback) {
  …
  };

  …
  return o;
};

// mix-in to existing objects
blogger = observer(blogger);

// or mix-in to new objects
var ny_times = observer({});</programlisting>

    <para>This method is described in more detail in Douglas Crockford's
    “<ulink url="http://oreilly.com/catalog/9780596517748/">JavaScript: the
    Good Parts</ulink>,” which I also highly recommend (although it is much
    tougher to get through than this book.)</para>
  </section>

  <section>
    <title>Conclusion</title>

    <para>The description and implementation of the observer pattern also
    concludes the book. I had mixed feelings at this point, excited about
    finally having a book that discusses JavaScript design patterns and
    sadness about coming to the end of the book. I would have loved to see
    more patterns and perhaps even a style guide. I also wouldn't have mind an
    introduction to the Mozilla JavaScript extensions introduced in Firefox.
    Although these are only available on Mozilla and some other open source
    browsers, their use will most likely increase in months to come, and
    hopefully see implementations in other browsers.</para>

    <para>Don't take my wishful thinking as something negative about the book
    though. I found it to be a very good book, and highly recommend it if you
    are looking for a good introduction to JavaScript or to upgrade your
    skills to "modern JavaScript".</para>
  </section>
</article>