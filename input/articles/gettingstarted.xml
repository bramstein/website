<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<article>
  <title>Getting started</title>

  <articleinfo>
    <date>2005-03-23</date>

    <author>
      <surname>Stein</surname>

      <firstname>Bram</firstname>
    </author>
  </articleinfo>

  <section>
    <title>Installing</title>

    <para>Download the latest version of the library and unzip it to a
    directory of your choosing. This article assumes you unzipped it to
    <filename>/Libraries/UI</filename>.</para>

    <section>
      <title>Directory structure</title>

      <para>The following directory structure is used in the source
      distrubution.</para>

      <itemizedlist>
        <listitem>
          <para><filename>library/Include</filename></para>

          <para>The include directory contains all the source code of the GUI
          library. It has six sub directories which also correspond with the
          namespaces used in the GUI library.</para>
        </listitem>

        <listitem>
          <para><filename>library/Include/border</filename></para>

          <para>The border directory contains all files related to rendering
          borders.</para>
        </listitem>

        <listitem>
          <para><filename>library/Include/component</filename></para>

          <para>The component directory contains all widgets, such as Buttons,
          Labels and MenuItems.</para>

          <note>
            <para>Please note that while all other directories have
            corresponding namespaces, the classes in the component directory
            are members of the ui namespace, and thus do not have a seperate
            ui::component namespace.</para>
          </note>
        </listitem>

        <listitem>
          <para><filename>library/Include/event</filename></para>

          <para>The event directory contains all event and listener interfaces
          in the library.</para>
        </listitem>

        <listitem>
          <para><filename>library/Include/layout</filename></para>

          <para>The layout directory contains all layout managers.</para>
        </listitem>

        <listitem>
          <para><filename>library/Include/theme</filename></para>

          <para>The theme directory contains the default and basic themes.
          Alternative themes do not have to be placed in the same
          directory.</para>
        </listitem>

        <listitem>
          <para><filename>library/Include/util</filename></para>

          <para>The util directory contains utility classes required for the
          GUI library, such as classes to represent points, rectangles and
          colors.</para>
        </listitem>

        <listitem>
          <para><filename>library/lib</filename></para>

          <para>Contains the prebuilt (Windows) static library files.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Setting up your environment</title>

      <para>You have to add the GUI library to the "include" and "library"
      directories of your compiler so that it can find the header files and
      static libraries to link against. An alternative is to place the GUI
      library in a subfolder of your project, but I recommend against this,
      because it makes upgrading to newer versions more difficult.</para>

      <para>If you use <ulink
      url="http://msdn.microsoft.com/vstudio/">Microsoft Visual Studio .NET
      2003 or above</ulink>, this is quite easy. Open up the IDE and go to the
      "Tools" menu. From there, select "Options". In the dialog box that pops
      up, open the "Projects" folder in the tree view and select "VC++
      Directories". Using the "Show directories for: " dropdown box in the
      upper right corner, select "Include folders" and create a new field for
      <filename>C:\Libraries\UI\Library\Include</filename>. Do the same for
      "Library files", but refer to
      <filename>C:\Libraries\UI\Library\Lib</filename>. Hit OK and you're
      done.</para>

      <para>If you're using XCode (Mac OS X) it is even easier. Download the
      framework distribution and unzip it to
      <filename>/Library/Frameworks/</filename> or
      <filename>~/Library/Frameworks/</filename>. In XCode, use the "add
      existing framework" option to add the library to your project. Also add
      the framework to your "copy" and "link" action in your application's
      target. That's all.</para>

      <para>For other IDE's and compilers, consult the manual of your compiler
      or IDE on how to do this.</para>
    </section>
  </section>

  <section>
    <title>Compiling</title>

    <para>If you need to change something in the library, or wish to compile
    it on a different compiler, you'll need to read this chapter. You might
    also want to rebuild the static libraries if you want to use different C++
    runtime libraries; for example, the single-threaded runtime.The prebuilt
    static libraries use the multi-threaded DLL runtime, which is required for
    projects that use the <ulink url="http://www.libsdl.org">Simple
    Directmedia Layer</ulink> library (SDL). This is only required if you
    actually use SDL in your program, the GUI library itself does not require
    it.</para>

    <section>
      <title>Requirements</title>

      <para>The requirements for compiling depend on which package you
      downloaded, both packages however require the following:<itemizedlist>
          <listitem>
            <para>A recent C++ compiler.</para>

            <para>The library has been tested and developed on MSVC7.1,
            MSVC8.0 and XCode 2.1(GCC 4.0). Other compilers might work as
            well, as no exotic C++ constructs or features are used. If you get
            it working on other compilers, please let me know.</para>
          </listitem>

          <listitem>
            <para>A good standard template library implementation.</para>

            <para>This usually comes with your C++ compiler (as it is part of
            C++), but not all implementations are adhering to the standard
            (MSVC6.X comes to mind). <ulink
            url="http://www.stlport.org">STLPort</ulink> is a good alternative
            if the implementation that comes with your compiler does not work
            properly.</para>
          </listitem>

          <listitem>
            <para>An OpenGL 1.1 or higher implementation.</para>

            <para>The library uses OpenGL to render to the screen and thus
            requires OpenGL to be present on your system. The library only
            uses standard OpenGL 1.1 functions, no extensions are
            required.</para>
          </listitem>
        </itemizedlist>Additionally, the UIDemo demo application requires the
      following installed on your system:<itemizedlist>
          <listitem>
            <para>Simple Directmedia Layer (SDL).</para>

            <para>The UIDemo application requires SDL 1.2.X installed, as it
            is used to set up the window and handle input.</para>
          </listitem>

          <listitem>
            <para>Simple Directmedia Layer image library.</para>

            <para>The <ulink
            url="http://www.libsdl.org/projects/SDL_image/">SDL_image</ulink>
            library is used to load the font image and is thus required for
            compiling the UIDemo application. Please note that the SDL_image
            library should be compiled for the SDL version you are using
            (incompatible versions will result in errors.)</para>
          </listitem>
        </itemizedlist>Finally, the UITest application requires the following
      to be installed on your system:<itemizedlist>
          <listitem>
            <para>Simple Directmedia Layer (SDL).</para>

            <para>The UIDemo application requires SDL 1.2.X installed, as it
            is used to set up the window and handle input.</para>
          </listitem>

          <listitem>
            <para>Freetype 2.</para>

            <para><ulink url="http://www.freetype.org/">Freetype</ulink> 2 is
            used for font rendering in the UITest application and is thus
            required for compiling.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Compiling with Microsoft Visual Studio .NET 2003</title>

      <para>If you have Microsoft Visual Studio .NET 2003 or above, you can
      simply open the solution in the root directory
      (<filename>/Libraries/UI</filename>) and hit compile. This should
      compile the library.</para>
    </section>

    <section>
      <title>Compiling with XCode 2.1</title>

      <para>There is an XCode project included in the source distribution,
      which should work with XCode 2.1 or above.</para>
    </section>

    <section>
      <title>Compiling with other compilers</title>

      <para>Since there are no project files for other IDE's, you'll have to
      create these yourself. To do this, create a new, empty project in your
      IDE of choice and mimic the folder structure in
      <filename>/Libraries/UI/Library/Include</filename>. Also add all the
      header (*.h) and C++ (*.cpp) files to it.</para>

      <para>Next, set the output directory of the static libraries to
      <filename>/Libaries/UI/Lib/Release</filename> and
      <filename>/Libraries/UI/Lib/Debug</filename>. Set the output filename of
      the Release build to <filename>UI.lib</filename> and the Debug build to
      <filename>UId.lib</filename> (the appended 'd' indicates it is a build
      containing debug information.) Add a post-build macro (or something
      similar) that moves the libraries to the
      <filename>/Libraries/UI/Lib</filename> directory after they are
      compiled, and you're done.</para>

      <para>Note that you don't actually have to stick to this directory
      structure. If you know what you're doing, you're free to change the
      structure or place the libraries wherever you please.</para>
    </section>
  </section>

  <section>
    <title>Building a simple application</title>

    <para>This chapter outlines the basics for building a simple application
    using the GUI library, or integrating it with an existing application. The
    code for this can be found in the UIDemo demo application. To start, link
    the release build of your program with the <filename>UI.lib</filename>,
    and the debug build with <filename>UId.lib</filename> static library
    files.</para>

    <section>
      <title>Setting up your application</title>

      <para>Create an instance of the <classname>Gui</classname> class. There
      should only be one <classname>Gui</classname> instance in your whole
      program, as it provides a single entry point for communication with the
      library. Having only one <classname>Gui</classname> instance does not
      mean you can only have one user interface in your program; you can have
      multiple <classname>Frame</classname> instances, which are in essence
      root nodes for user interfaces.</para>

      <para>To make the library work correctly you need to pass several input
      parameters to the <classname>Gui</classname> instance so that all user
      interfaces in your program receive mouse and keyboard input and timing
      information. Assuming you have created an instance of
      <classname>Gui</classname>, named <literal>guiInstance</literal> you
      should pass parameters like so:</para>

      <example>
        <programlisting>// send frame delta time
guiInstance-&gt;importUpdate(deltaTime);

// send mouse x and y coordinates
guiInstance-&gt;importMouseMotion(x,y);</programlisting>
      </example>

      <para>These two import methods need to be called and updated every
      frame. The delta time is the time between the last and current frame in
      milliseconds, and is used to correctly calculate animations and
      interpolations in the GUI. The mouse coordinates are simply the current
      X and Y mouse coordinates. Besides these two methods, there are four
      other import methods related to mouse and keyboard events that need to
      be called, but only when their respective events occur.</para>

      <example>
        <programlisting>// send mouse button released events
guiInstance-&gt;importMouseReleased(button);

// send mouse button pressed events
guiInstance-&gt;importMousePressed(button);

//send key release event
guiInstance-&gt;importKeyReleased(key,modifier);

// send key pressed event
guiInstance-&gt;importKeyPressed(key,modifier);</programlisting>
      </example>

      <para>The mouse related import methods only take one parameter, the
      button that was pressed. Valid values are
      <literal>MOUSE_BUTTON1</literal>, <literal>MOUSE_BUTTON2</literal>,
      <literal>MOUSE_BUTTON3</literal>, <literal>MOUSE_SCROLL_UP</literal> and
      <literal>MOUSE_SCROLL_DOWN</literal> and can be found in
      <filename>event/MouseEvent.h</filename>. For a right handed mouse this
      translates into the left mouse button, the right mouse button, and
      optionally a third button, scroll wheel up and scroll wheel down
      respectively.</para>

      <para>The key related import methods both take two parameters, the key
      code and modifier code. The key code is the code of the key that was
      pressed or released and the modifier code the modifier that was active
      while that key was pressed (such as <keycode>shift</keycode> or
      <keycode>ctrl</keycode>.) Valid values can be found in
      <filename>event/KeyEvent.h</filename>. Note that most key codes
      correspond to the official ASCII key codes, which should simplify
      sending key events from your application.</para>

      <para>There are a few other important methods you need to call in order
      to use the library, such as the paint method which will be discussed in
      the next section. There are also several methods related to the font
      engine. Writing and setting up a font engine is required for components
      that render text to the screen (which almost all components do) and is
      discussed in a <ulink url="fontengine.html">seperate
      article</ulink>.</para>

      <para>The last two methods of the GUI class are
      <methodname>addFrame</methodname> and
      <methodname>removeFrame</methodname>. Using these two methods you can
      add or remove Frame instances to your user interface. Adding a Frame
      ensures that it receives all user input and gets rendered in the proper
      order. Removing it stops all user input and rendering for that
      <classname>Frame</classname>. If you wish to disable an user interface,
      it is preferred to disable it by calling the
      <methodname>hide</methodname> method on it. This will hide the
      <classname>Frame</classname>, but does not remove it from the
      <classname>Gui</classname> instance. Note that a
      <classname>Frame</classname> is initially hidden so you'll have to call
      the <methodname>show</methodname> method for it to display.</para>
    </section>

    <section>
      <title>Setting up OpenGL</title>

      <para>To render the GUI, you'll need to set up OpenGL before calling the
      paint method of your <classname>Gui</classname> instance. This is as
      simple as switching to orthographic mode and calling the paint method,
      as shown in the example below.</para>

      <example>
        <programlisting>// go to orthographic mode
glMatrixMode(GL_PROJECTION);
glPushMatrix();
glLoadIdentity();
gluOrtho2D(0,width,height,0);
glMatrixMode(GL_MODELVIEW);

// paint the Gui
guiInstance-&gt;paint();

// switch back to perspective mode
glMatrixMode(GL_PROJECTION);
glPopMatrix();
glMatrixMode(GL_MODELVIEW);</programlisting>
      </example>

      <para>Especially note the <methodname>gluOrtho2D</methodname> call,
      which is slightly unusual in that it sets up the 0,0 point in the upper
      left corner, instead of the OpenGL default of having the 0,0 point in
      the lower left corner. This is because the GUI uses the upper left
      corner as its 0,0 point. This also means that any custom painting in the
      GUI or derived classes have to take this into account.</para>

      <para>In order for blending to work (which is used by most font engines
      and the default theme of the Menu component) you might also wish to set
      the blending function to <constant>GL_SRC_ALPHA,
      GL_ONE_MINUS_SRC_ALPHA</constant> using
      <methodname>glBlendFunc</methodname>. Your GUI should now render and
      function properly.</para>
    </section>
  </section>
</article>